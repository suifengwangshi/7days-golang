一、设计Context
1.必要性
第一，对于Web服务来说，无非是根据请求*http.Request，构造响应http.ResponseWriter。但是这两个对象提供的接口
粒度太细，比如我们要构造一个完整的响应，需要考虑消息头(Header)和消息体(Body)，而Header包含了状态码(StatusCode)，
消息类型(ContentType)等几乎每次请求都需要设置的信息。因此，如果不进行有效的封装，那么框架的用户将需要写大量
重复的代码，而且容易出错。针对常用场景，能够高效地构造出HTTP响应是一个好的框架必须考虑的点；
第二，对于框架来说，还需要支撑额外的功能，比如解析动态路由/hello/:name，参数:name的值放在哪里？再比如，框架
需要支持中间件，那中间件产生的信息放在哪里？Context随着每一个请求的出现而产生，请求的结束而销毁，和当前请求
强相关的信息都应该由Context承载。因此，设计Context结构，扩展性和复杂性留在了内部，而对外简化了接口。路由的
处理函数，以及将要实现的中间件，参数都统一使用Context实例。


注意：GO在HTTP回调处理函数中，对应答头、状态码、应答体的设置有顺序要求。

正确顺序：应答头（1）、状态码（2）、应答体（3）
所以应该 先 Header().Set 再 WriteHeader() 再 Write()